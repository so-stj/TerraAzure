name: Terraform Apply

on:
  pull_request:
    branches:
      - main
      - develop
    types: [closed]
    paths:
      - '**.tf'

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  # Terraform variables. Environment-specific variables will override these defaults.
  TF_VAR_prefix: ${{ vars.TF_VAR_PREFIX || 'tfvm' }}
  TF_VAR_location: ${{ vars.AZURE_LOCATION || 'japaneast' }}
  TF_VAR_resource_type: ${{ vars.RESOURCE_TYPE || 'vm' }}
  TF_VAR_admin_username: ${{ vars.ADMIN_USERNAME || 'azureuser' }}
  TF_VAR_vm_size: ${{ vars.VM_SIZE || 'Standard_B2s' }}
  TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
  TF_VAR_app_service_sku_tier: ${{ vars.APP_SERVICE_SKU_TIER || 'Standard' }}
  TF_VAR_app_service_sku_size: ${{ vars.APP_SERVICE_SKU_SIZE || 'S1' }}
  TF_VAR_app_service_linux_fx_version: ${{ vars.APP_SERVICE_LINUX_FX_VERSION || 'DOCKER|nginx:latest' }}

jobs:
  terraform-apply-staging:
    name: Apply - Staging
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Azure login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          use-oidc: true

      - name: Terraform Init
        run: |
          if [ -n "${{ vars.BACKEND_RESOURCE_GROUP_NAME }}" ]; then
            terraform init -input=false \
              -backend-config="resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP_NAME }}" \
              -backend-config="storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}" \
              -backend-config="container_name=${{ vars.BACKEND_CONTAINER_NAME }}" \
              -backend-config="key=${{ vars.BACKEND_KEY || 'terraform.tfstate' }}"
          else
            terraform init -input=false
          fi

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan -no-color

      - name: Terraform Apply
        run: |
          # „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ‰ΩøÁî®ÊôÇ„ÅØÂêåÊôÇÊõ∏„ÅçËæº„Åø„ÇíÈò≤Ê≠¢
          if [ -n "${{ vars.BACKEND_RESOURCE_GROUP_NAME }}" ]; then
            terraform apply -auto-approve tfplan -lock-timeout=5m
          else
            terraform apply -auto-approve tfplan
          fi

      - name: Notify Staging Deployment Complete
        run: |
          echo "## ‚úÖ Staging Deployment Complete"
          echo "**Environment**: Staging"
          echo "**Resources**: Deployed successfully"
          echo "**Deployed by**: ${{ github.actor }}"
          echo "**Deployment time**: $(date)"
          echo ""
          echo "### üöÄ Next Steps"
          echo "1. Verify staging environment is working correctly"
          echo "2. Run tests on staging environment"
          echo "3. If everything looks good, proceed to production deployment"
          echo ""
          echo "### üìã Production Deployment"
          echo "To deploy to production:"
          echo "1. Go to Actions tab"
          echo "2. Select 'Terraform Apply - Production' workflow"
          echo "3. Click 'Run workflow'"
          echo "4. Set 'Confirm production deployment' to true"
          echo "5. Click 'Run workflow' to start production deployment"

      - name: Create Production Deployment Summary
        run: |
          echo "## üöÄ Production Deployment Ready"
          echo ""
          echo "### üìã Next Steps for Production Deployment"
          echo "1. **Verify staging environment is working correctly**"
          echo "2. **Run tests on staging environment**"
          echo "3. **If everything looks good, proceed to production deployment**"
          echo ""
          echo "### üìä Production Deployment Workflow"
          echo "To deploy to production:"
          echo "1. Go to Actions tab"
          echo "2. Select 'Terraform Apply - Production' workflow"
          echo "3. Click 'Run workflow'"
          echo "4. Set 'Confirm production deployment' to true"
          echo "5. Click 'Run workflow' to start production deployment"
          echo ""
          echo "### ‚ö†Ô∏è Important Notes"
          echo "- This is a **PRODUCTION** deployment"
          echo "- Please review carefully before proceeding"
          echo "- Monitor the deployment closely"
          echo "- Have rollback plan ready"
