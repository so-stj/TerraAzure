name: Terraform Plan

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - '**.tf'
      - '.github/workflows/plan.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  # Terraform variables. You can override defaults via Repository Variables.
  TF_VAR_prefix: ${{ vars.TF_VAR_PREFIX || 'tfvm' }}
  TF_VAR_location: ${{ vars.AZURE_LOCATION || 'japaneast' }}
  TF_VAR_resource_type: ${{ vars.RESOURCE_TYPE || 'vm' }}
  TF_VAR_admin_username: ${{ vars.ADMIN_USERNAME || 'azureuser' }}
  TF_VAR_vm_size: ${{ vars.VM_SIZE || 'Standard_B2s' }}
  TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
  TF_VAR_app_service_sku_tier: ${{ vars.APP_SERVICE_SKU_TIER || 'Standard' }}
  TF_VAR_app_service_sku_size: ${{ vars.APP_SERVICE_SKU_SIZE || 'S1' }}
  TF_VAR_app_service_linux_fx_version: ${{ vars.APP_SERVICE_LINUX_FX_VERSION || 'DOCKER|nginx:latest' }}

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Azure login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
          use-oidc: true

      - name: Terraform Init
        run: |
          RESOURCE_GROUP_NAME="${{ github.event.inputs.backend_resource_group_name || vars.BACKEND_RESOURCE_GROUP_NAME }}"
          STORAGE_ACCOUNT_NAME="${{ github.event.inputs.backend_storage_account_name || vars.BACKEND_STORAGE_ACCOUNT_NAME }}"
          CONTAINER_NAME="${{ github.event.inputs.backend_container_name || vars.BACKEND_CONTAINER_NAME }}"
          BACKEND_KEY="${{ github.event.inputs.backend_key || vars.BACKEND_KEY || 'terraform.tfstate' }}"
          if [ -n "$RESOURCE_GROUP_NAME" ]; then
            terraform init -input=false \
              -backend-config="resource_group_name=$RESOURCE_GROUP_NAME" \
              -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
              -backend-config="container_name=$CONTAINER_NAME" \
              -backend-config="key=$BACKEND_KEY"
          else
            terraform init -input=false
          fi
      - name: Terraform Format Check
        id: format
        run: |
          terraform fmt -check -recursive -no-color 
          echo "format_status=success" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: |
          terraform validate -no-color
          echo "validate_status=success" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Run terraform plan
        id: plan
        run: |
          terraform plan -no-color -detailed-exitcode -out=plan.tfplan 2>&1 | tee plan_output.txt
          echo "plan_exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Show Plan Output
        run: |
          if [ -f plan_output.txt ]; then
            echo "=== Terraform Plan Output ==="
            cat plan_output.txt
          fi
      - name: Read Plan and Post Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let output = '## üîç Terraform Plan Results\n\n';
            
            if (context.payload.pull_request) {
              output += `**PR**: #${context.issue.number} - ${context.payload.pull_request.title}\n`;
              output += `**Branch**: \`${context.payload.pull_request.head.ref}\` ‚Üí \`${context.payload.pull_request.base.ref}\`\n`;
            } else if (context.eventName === 'workflow_dispatch') {
              output += `**Trigger**: Manual Run by \`${context.actor}\`\n`;
              output += `**Branch**: \`${context.ref_name}\`\n`;
            } else if (context.eventName === 'workflow_run' && context.event.workflow_run) {
              output += `**Triggered by Workflow Run**: [${context.event.workflow_run.id}](${context.event.workflow_run.html_url})\n`;
              output += `**Branch**: \`${context.event.workflow_run.head_branch}\`\n`;
            } else if (context.eventName === 'repository_dispatch' && context.event.client_payload && context.event.client_payload.pull_request) {
              output += `**PR**: #${context.event.client_payload.pull_request.number} - ${context.event.client_payload.pull_request.title}\n`;
              output += `**Branch**: \`${context.event.client_payload.pull_request.head.ref}\` ‚Üí \`${context.event.client_payload.pull_request.base.ref}\`\n`;
            } else if (context.event.ref) {
              output += `**Ref**: \`${context.event.ref}\`\n`;
            } else {
              output += `**Event**: \`${context.eventName}\`\n`;
              if (context.actor) {
                output += `**Actor**: \`${context.actor}\`\n`;
              }
            }
            output += `**Resource Type**: \`${{ env.TF_VAR_resource_type }}\`\n\n`;
            
            const formatStatus = '${{ steps.format.outputs.format_status }}';
            if (formatStatus === 'success') {
              output += '‚úÖ **Format Check**: Passed\n\n';
            } else {
              output += '‚ùå **Format Check**: Failed - Code formatting issues found\n\n';
            }
            
            const validateStatus = '${{ steps.validate.outputs.validate_status }}';
            if (validateStatus === 'success') {
              output += '‚úÖ **Validation**: Passed\n\n';
            } else {
              output += '‚ùå **Validation**: Failed - Configuration errors found\n\n';
            }
            
            const planExitCode = '${{ steps.plan.outputs.plan_exit_code }}';
            if (planExitCode === '0') {
              output += '‚úÖ **Plan**: No changes required\n\n';
            } else if (planExitCode === '2') {
              output += 'üìã **Plan**: Changes detected\n\n';
            } else {
              output += '‚ùå **Plan**: Failed\n\n';
            }
            
            if (fs.existsSync('plan_output.txt')) {
              const plan = fs.readFileSync('plan_output.txt', 'utf8');
              if (plan.trim() !== '') {
                output += '### üìã Plan Output\n```\n' + plan + '\n```\n';
              }
            }
            
            output += '\n---\n';
            output += '### üöÄ Next Steps\n';
            output += '1. Review the plan output above\n';
            output += '2. If changes look good, merge this PR to trigger deployment\n';
            output += '3. The apply workflow will run automatically on merge\n\n';
            
            if (context.payload.pull_request) {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('## üîç Terraform Plan Results');
              });
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output,
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: output,
                });
              }
            } else {
              core.summary.addRaw(output);
              core.summary.write();
            }