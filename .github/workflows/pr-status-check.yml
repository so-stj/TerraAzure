name: PR Status Check

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  check-pr-status:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    
    steps:
      - name: Check PR Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Check for Terraform plan comments
            const planComments = comments.filter(comment => 
              comment.body.includes('## üîç Terraform Plan Results') ||
              comment.body.includes('## Terraform Plan Results')
            );
            
            if (planComments.length > 0) {
              const latestComment = planComments[planComments.length - 1];
              
              // Check if plan was successful
              const hasSuccessfulPlan = latestComment.body.includes('‚úÖ **Plan**:') && 
                (latestComment.body.includes('No changes required') || 
                 latestComment.body.includes('Changes detected'));
              
              const hasSuccessfulValidation = latestComment.body.includes('‚úÖ **Validation**: Passed');
              const hasSuccessfulFormat = latestComment.body.includes('‚úÖ **Format Check**: Passed');
              
              if (hasSuccessfulPlan && hasSuccessfulValidation && hasSuccessfulFormat) {
                // Create success status
                await github.rest.repos.createCommitStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.payload.pull_request.head.sha,
                  state: 'success',
                  target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number}`,
                  description: 'Terraform plan successful - ready for merge',
                  context: 'terraform/plan-status'
                });
                
                console.log('‚úÖ PR is ready for merge');
              } else {
                // Create failure status
                await github.rest.repos.createCommitStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.payload.pull_request.head.sha,
                  state: 'failure',
                  target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number}`,
                  description: 'Terraform plan failed - review required',
                  context: 'terraform/plan-status'
                });
                
                console.log('‚ùå PR needs review');
              }
            } else {
              // No plan comments found
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: 'pending',
                target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number}`,
                description: 'Waiting for Terraform plan',
                context: 'terraform/plan-status'
              });
              
              console.log('‚è≥ Waiting for Terraform plan');
            }
